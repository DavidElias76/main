/* CREATING A BORDER ELEMENT*/
.name{
    border: 2px solid black;
    padding: 20px;
    width: 20%;
    text-align: center;
    margin: 20px;
}

/* USING THE BORDER-RADIUS PROPERTY O STYLE EACH CORNER OF BORDER RADIUS- CSS ADVANCED*/
.name{
    border-top-left-radius: 20px;
    border-bottom-left-radius: 30px;
    border-top-right-radius: 50px;
    border-bottom-right-radius: 55px;
}

/* border-radius can also be used to create a elliptical corners
.name{
    border-radius: 50px / 20px ;
}
*/

/* USING THE BORDER-IMAGE PROPERTY SHORTHAND ARE SOURCE/SLICE/WIDTH/OUTSET/REPEAT*/
.image{
    border: 10px solid;
    border-image: url('../images folder/img_forest.jpg') 30 stretch;
    border-image-slice: fill;/*other valuea are in % /number*/
    border-image-width: 30px;
    border-image-outset: 5px;
    border-image-repeat: repeat;/* other values are stretch/repeat/round/space*/
    padding: 20px;
    text-align: center;
}

/* USING THE CSS MULTILPLE BACKGROUNDS- multiple backgrounds are separated by a comma in the css

.img-container{
background-image: url("../images folder/img_mountains.jpg"), url("../images folder/image2.jpg");
    background-size: cover,contain;
    background-position: right bottom, left top;
    background-repeat: no-repeat,repeat;
    height: 400px;
}
*/
/* CREATING A HERO IMAGE- ADDING A TEXT INSIDE A IMAGE 
.hero-imag{
    background-image: url("../images folder/img_mountains.jpg");
    background-size: cover;
    position: relative;
    height: 400px;

}
.hero-text{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
*/


/* CSS GRADIENT COLOR - DEFINING GGRADIENT COLOR NB: ALWAYS SPECIFY THE WIDTHA ND HEIGHT OF GRADIENT COLORS*/

/* 1 .LINEAR GRADIENT COLOR - you can use multiple color for linear gradient*/

#grad-1{
    /*background-image: linear-gradient(red, yellow); direction for TOP to BOTTOM*/
    /*background-image: linear-gradient(to right, red, yellow); Direction from LEFT TO RIGHT*/
    /*background-image: linear-gradient(to bottom right, red, yellow); Drection from TOP LEFT TO BOTTOM RIGHT/ TOP RIGHT TO BOTTOM LEFT*/
    height: 200px;
}
/*USING THE ANGLES IN LINEAR GRADIENTS
#grad-1{
    /*background-image: linear-gradient(180deg, red, yellow);*/
     /* you can use other deg values like:
     - 0deg is equivalent to "to top" direction
     - 90deg is eqivalent to "to right" direction
     - 180deg is equivalent to "to bottom" direction
}
*/
/* USING MULTIPLE COLORS STOPS
#grad-1{
    background-image: linear-gradient(to right, red, orange,yellow, green,blue,indigo, violet);
}
*/

/* USING TRASPARENCY/OPACITY
#grad-1{
    background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
}
*/

/* REPEATING-LINEAR-GRADIENT
#grad-1{
    background-image: repeating-linear-gradient(red, yellow 10%, green 20%);
}
*/

/* 2 . RADIAL GRADIENTS */

/*Evenly spaced color stops
#grad-1{
    background-image: radial-gradient(red, yellow, green);
}
*/

/*Differently spaced color strips
#grad-1{
    background-image: radial-gradient(red 5%, yellow 15%, green 60%);
}
*/

/* Set shape fo the radial-gradient
#grad-1{
    background-image: radial-gradient(circle, red, yellow, green); /* shapes can be circle/rectangle/square

} 
*/
/*Using different keywords
#grad-1{
    background-image: radial-gradient(closest-side at 60% 50%, red, yellow, black);
}
*/

/* repeating radial gradient
#grad-1{
    background-image: radial-gradient(red, yellow 10%, green 15%);
}
*/


/* 3. CONIC GRADIENTS*/

/*Position around a center point - 0degree=center point
#grad-1{
    background-color: red;
    background-image: conic-gradient(red, yellow, green);
    width: 200px;
}
*/

/* Using three different colors and degrees
#grad-1{
    background-image: conic-gradient(red 45deg, yellow 90deg, green 120deg);
}
*/

/* creating a Pie Chart*/

/* Adding border radius property to make it look like a pie chart
#grad-1{
    background-image: conic-gradient(red, yellow, green, blue, black);
    border-radius: 50%;
    width: 200px;
}
*/
/* Creating a pie chart using different colors and degrees
#grad-1{
    background-image: conic-gradient(red 0deg, red 90deg, yellow 90deg, yellow 180deg, green 180deg,green 270deg, blue 270deg);
    width: 200px;
    border-radius: 50%;
}
*/
/* creating a conic gradinet with specified "FROM ANGLE"
#grad-1{
    background-image: conic-gradient(from 90deg,red, yellow, green);
    border-radius: 50%;
    width: 200px;
}
*/
/* Repaeting a conic gradient*/
#grad-1{
    background-image: repeating-conic-gradient( red 10%, yellow 20%);
    border-radius: 50%;
    width: 200px;
}

/*CSS TETX SHADOW EFFECTS*/
/*1. TEXT SHADOW
h3{
    text-shadow: 2px 2px red;
}
*/

/*Multiple shadows are seperated by a comma
h1{
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
}
    */
h3{
    text-shadow: 0 0 5px #ff0000, 0 0 3px #0000ff;
}
h2{
    text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
}
h1{
    text-shadow: -1 0 black, 0 1px black, 0 -1px black;
}

/* CREATING A BOX SHADOW*/

.shadow{
    box-shadow: 10px 10px 5px 12px lightblue inset;
    background-color: coral;
    padding: 15px;
    width: 200px;
    height: 200px;
}
.class{
    box-shadow: 0px 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    width: 200px;
    text-align: center;
}
.header{
    padding: 30px;
    background-color: green;
    color: white;
    font-size: 20px;
}
.container{
    padding: 20px;
}
.polaroid{
    box-shadow:0px 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    text-align: center;
}
.img-contaner{
    padding: 20px;
}

/* CSS TEXT EFFECTS*/

.test-1{
    border: 2px solid black;
    text-overflow: clip;
    width: 200px;
    overflow: hidden;
    white-space: nowrap;

}
.test-2{
    border: 2px solid black;
    text-overflow: ellipsis;
    width: 200px;
    overflow: hidden;
    white-space: nowrap;
}

.test{
    border: 2px solid black;
    overflow: hidden;
    white-space: nowrap;
    width: 200px;
}
div.test:hover{
    overflow: visible;
}
.testing{
    width: 11em;
    word-wrap: break-word;/*breaks the word and wrap onto the next line*/
    word-break: keep-all;/* the lines will break at hyphens- other values is break-all(the line will break at any character)*/
    border: 2px solid black;
    width: 200px;
    writing-mode: horizontal-tb;/* Horizontal-tb lines are written at default mode while vertical-rl lines are written vertically*/
}

/* USING 2D TRASNFORM


1. TRANSLATE METHDO() - moves element from its current position*/
.transform{
    /* transform: translate(50px, 100px); */
    border: 2px solid black;
    background-color: darkcyan;
    color: black;
    width: 300px;
    height: 100px;
    
}
/*2. rotate()method - rotaes the element at any degree specified clockwise or anti-clockwise*/
.rotate{
    /*transform: rotate(20deg);*/
    border: 2px solid black;
    width: 300px;
    height: 100px;
    background-color: yellow; 
}


/* 3. Scale Method increases and decreases the width and the height of an element
.scale{
    width: inherit;
    height: inherit;
    border: inherit;
    background-color: red;
    color: black;
    transform: scale(3,3); increases the size 
    transform: scale(0.5, 0.5);decrease the elemnt and make it smaller in size in width and height
}
*/
/*
.scale{
    transform: scaleX(2); increases and decreases the width of the element
    transform: scaleY(1);increases and decreese the height of the element
}

*/

/*ROTATE USING THE SKEW() METHOD AND MATRIX METHOD
.rotate{
    /*transform: skewX(20deg); Skews elements along the x-axis
    /*transform: skewY(20deg); /*Skews element along the y-axis
    /*transform: matrix(1, -0.3, 0, 1, 0, 0);combines all 2d transforms into one using matrix

}
*/



/*CSS 3D TRANSFORMS*/

/*1. rotatex() method

 .rotate{ 
    transform: rotateX('150deg');
    transform: rotateY('150deg');
    transform: rotateZ('150deg');
}
 */


/* TRANSFROM PROPERTY HAS OTHER VALUES 
#div1{
    position: relative;
    border: 2px solid black;
    width: 200px;
    height: 200px;
    margin: 100px;
    padding: 10px;

}
#div2{
    border: inherit;
    transform: rotate(45deg);
    transform-origin: 20% 40%;
    background-color: red;
    color: black;
    padding: 50px;

}
#div-1{
    position: relative;
    border: 2px solid black;
    width: 300px;
    height: 250px;
    margin: auto;
    padding: inherit;

}
#div-2{
    background-color: red;
    position: absolute;
    border: 1px solid black;
    color: black;
    padding: 50px;
    transform: rotateY(60deg);
    transform-style: preserve-3d;
}
#div-3{
    background-color: yellow;
    border: 1px solid black;
    color: black;
    padding: 40px;
    position: absolute;
    transform: rotateY(-60deg);
}
*/

/* PERSPECTIVE PROPERTY-   */
.div1{
    position: relative;
    border: 2px solid black;
    width: 150px;
    height: 150px;
    margin-left: 60px;

}
.div2,.div4{
    padding: 50px;
    position: absolute;
    border: 1px solid black;
    background: rgba(100,100,100,0.5); 
    transform-style: preserve-3d;
    transform: rotateX(45deg);
}
.div3{
    position: relative;
    height: 150px;
    width: 150px;
    margin-left: 60px;
    border: 1px solid blue;
    perspective: none;
}


/* CSS TRANSITIONS */

.transitions{
    border-end-end-radius: 2px solid black;
    color: white;
    background-color: grey;
    border-radius: 10px;
    width: 100px;
    height: 50px;
    padding: 20px;
    transition: width 2s;
    transition-delay: 1s;
}
.transitions:hover{
    width: 300px;
}
.transitions{
    /* transition-timing-function: linear; */
    /* transition-timing-function: ease; */
    /* transition-timing-function: ease-in; */
    transition-timing-function: ease-out;
    /* transition-timing-function: ease-in-out; */
}
/* Using transition and transform together */

.transform-transition{
    border: 2px solid black;
    width: 100px;
    height: 50px;
    transition: width 2s, height 2s, transform 2s;
    background-color: red;
}
.transform-transition:hover{
    width: 300px;
    height: 200px;
    transform: rotate(45deg);
}



























