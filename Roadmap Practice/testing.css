*{
    /* margin: 20px; */
    box-sizing: border-box;

}
.green-box {
    width: 200px;
    height: 100px;
    background-color: green;
    /* transition: width 2s;transition property is used to add effects to the element to the width */
    /* transition: height 2s; transition property is used to add effects to the element to the height */

    /*TRANSITION SHORTHAND PROPERTY*/
    transition: width 2s linear 1s;
}
.green-box:hover{
    /* width: 400px;hovers 400px */
    height: 200px; /*hover height 200px*/
    
}
.animation-1{
    width: 300px;
    height: 150px;
    animation-name: animation-1;
    animation-duration: 4s;
    background-color: chocolate;
}
@keyframes animation-1{
    from{background-color: red;}
    to{background-color: green;}
}
/*using percentages to define animations*/
.animation-2{
    width: 200px;
    height: 150px;
    animation-name: animation-2;
    animation-duration: 4s;
    background-color: red;
}
@keyframes animation-2{
    0%{background-color: red;}
    25%{background-color: yellow;}
    50%{background-color: blue;}
    100%{background-color: green;}
}

/* USING CSS PROPERTIES WITH ANIMATION */
.animation-3{
    width: 100px;
    height: 100px;
    background-color: green;
    position: relative;/*remove the div element from its normal position*/
    animation-name: animation-3;
    animation-duration: 3s;
    animation-iteration-count: 3;/*number of times it should run*/
    
}
@keyframes animation-3{
    0%{
        background-color: red;
        left: 0px;
        top: 0px;
    }
    25%{
        background-color: yellow;
        left: 200px;
        top: 0px;
    }
    50%{
        background-color: blue;
        top: 200px;
        left: 200px;
    }
    75%{
        background-color: green;
        top: 200px;
        left: 0px;
    }
    100%{
        background-color: red;
        top: 0px;
        left: 0px;
    }
}

/* CSS SYLING IMAGES  */

/* .container{
    width: 50%;
    position: relative;

}
.image{
    width: 100%;
    height: auto;
    display: block;
}
.overlay{
    width: 100%;
    height: 100%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* -ms-transform: translate(-50%, -50%);
    background-color: rgb(43, 43, 163);
    opacity: 0;
    overflow: hidden;
    transition: 0.5s ease;

}
.text{
    color: black;
    font-size: 2rem;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    /* to create a fade in box add some padding and background-color
    padding: 14px 16px;
    background-color: brown;


}
.container:hover .overlay{
    /* opacity: 0.7; 
    opacity: 0.5;/*reduce the opacity to see the padding box
} */

/* CSS FADE IN TOP, BOTTOMM, LEFT AND RIGHT */


.btn{
    width: 150px;
    height: 50px;
    color: black;
    background-color: burlywood;
    margin: 30px;
    border-radius: 10px;
    border: 1px solid black;
    outline: none;
}
.btn span{
    position: relative;
    display: inline-block;
    transition: 0.5s;
}
.btn span:after{
    content: "\00BB";
    position: absolute;
    right: -25px;
    opacity: 0;
    transition: 0.5s;
    color: white;
}
.btn:hover span::after{
    opacity: 1;
    right: 0;
}
.btn:hover span{
    padding-right: 25px;

}

/* pressed effect */
.btn2{
    width: 150px;
    height: 50px;
    color: black;
    background-color: greenyellow;
    border: 1px solid black;
    outline: none;
    border-radius: 10px;
    margin: 30px;
    box-shadow: 0px 9px #999;
}
.btn2:active{
    box-shadow: 0px 5px #666;
    transform: translateY(5px);/*on the y-axis*/
}
.pagnation{
    display: inline-block;
    /* text-align: center; */
    
}
.pagnation a{
    color: black;
    padding: 20px;
    border: 1px solid black;
    font-size: 20px;
    margin: 10px; 
    text-decoration: none;
    transition: .3s;
    border-radius: 5px;

}
.pagnation a.active{
    background-color: green;

}
.pagnation a:not(.active){
    background-color: #666; /*backgroundc*/
}
.center{
    text-align: center;
}
.pagnation a:hover{
    /* border: 2px solid black; */
    transform: scale(1.3) translateY(-5px);
    background-color: burlywood;
    transition: 0.5s ease;
    box-shadow: 0px 0px 20px burlywood;
    
}
.newspaper{
    column-count: 3;
}

.columns{
    column-count: 3;

}
.column{
    border: 2px solid black;
    height: 50vh;
    padding: 30px;
    color: black;
    line-height: 2;
    font-size: 1rem;
    font-weight: 400;

}

/* css variable */

/* declaring global  variable */

:root{
    --blue: #ff100f;
    --white: #000000;
}

.variable{
    color: var(--blue); /*declaring local variable*/

}
.button4{
    --button-blue: #34b61a;/*declaring a new local varibale to override the global varibale*/
    --button1-blue: #a01443;
    background-color: var(--button1-blue);
    padding: 20px;
    color: var(--button-blue);
    /* padding: 10px;
    color: var(--blue);
    background-color: var(--white); */

}

/*  CSS PROPERTY RULE*/

@property --my-bg-color{
    syntax: "<color>";
    inherits: true;
    initial-value: rgb(78, 160, 110);
}

@property --my-color{
    syntax: "<color>";
    inherits: true;
    initial-value: black;
}
.txt1{
    width: 50vw;
    height: 50vh;
    border: 1px solid black;
    padding: 2rem;
    margin: 4rem;
    background-color: var(--my-bg-color);
    color: var(--my-color);
    resize: both; /*doesnot workk when fixed widtha nd height */
}

/* COMBINING ANIMATION WITH @PROPERTY RULE */
.block{
    width: 32vw;
    height: 30vh;
    border: 1px solid black;
    display: inline-block;
    text-align: center;
    font-size: 20px;
    font-weight: 400;
    background-color: grey;
    animation: elly .3s  ease;
    animation-iteration-count: 3;
}

@property --start-color{
    syntax: "<color>";
    inherits: true;
    initial-value: red;
}

@property --middle-color{
    syntax: "<color>";
    inherits: true;
    initial-value: green;
}

@property --end-color{
    syntax: "<color>";
    inherits: true;
    initial-value: blue;
}
@keyframes elly{
    0%{
        background-color: var(--start-color);
    }
    50%{
        background-color: var(--middle-color);
    }
    100%{
        background-color: var(--end-color);
    }
}

.media{
    width: 30vw;
    height: 40vh;
    background-color: #a01443;
    text-align: center;
    font-size: 20px;
}

@media screen and (max-width: 600px) { /*means width lower than 600px the styles are apllied*/
    .media {
        width: 80vw;
        height: 30vh;
        background-color: #34b61a;
        font-size: 16px;
    }
}

@media screen and (min-width: 601px) { /*means width higher than 601px the styles are applied*/
    .media {
        width: 50vw;
        height: 35vh;
        background-color: #ff100f;
        font-size: 18px;
    }
}

@media only screen and (orientation: landscape){
    .media{
        background-color: lightblue;
    }
}

/* CSS FLEXBOX */

.flex-container{
    border: 2px solid black;
    display: flex;
    /* flex-direction: row;chhanging the direction of the fle container */
    /* flex-wrap: wrap;wrap creates another line when necessary */
    flex-wrap: wrap; /*default doesnot create another line*/
    justify-content: flex-start;

    
    /*works well by adding height to the flex-container*/
    height: 150vh;
    align-items: center; 

    /* align-content: center;controls the gap btw flex-lines and flex-items */

}

.flex{
    width: 20vw;
    height: 30vh;
    background-color: #a01443;
    border: 1px solid  black;
    font-size: 2rem;
    font-weight: 400;
    text-align: center;
}

/* USING FLEX WIITH MEDIA QUERIES */

@media screen and (max-width: 600px){
    .flex-container{
        flex-direction: column; /*change the flex direction form column to row */
    }
}


/* CSS GRID LAYOUT  */

.grid-container{
    display: grid;
    /* grid-auto-flow: column; */
    grid-auto-columns: auto;
    background-color: #666;
    /* height: 150vh; */
    /* gap: 30px 50px; gap menas 30px on the row and 50px on the column */
    gap: 20px; /*menans both row and column have a gap of 20px*/

}
.grid-item{
    width: 20vw;
    height: 20vh;
    font-size: 20px;
    text-align: center;
    font-weight: 300;
    background-color: #a01443;
    grid-auto-columns: max-content;


}
.grid-item1{
    width: 20vw;
    height: 20vh;
    font-size: 20px;
    text-align: center;
    font-weight: 300;
    background-color: #a01443;
    /* grid-column-start: 1;
    grid-column-end: 3; */
}